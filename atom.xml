<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Smonff Shurfs]]></title>
  <link href="http://smonff.github.io/atom.xml" rel="self"/>
  <link href="http://smonff.github.io/"/>
  <updated>2014-05-03T12:04:55+07:00</updated>
  <id>http://smonff.github.io/</id>
  <author>
    <name><![CDATA[Smonff]]></name>
    <email><![CDATA[smonff@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[You need a tool to search inside your standard library]]></title>
    <link href="http://smonff.github.io/blog/2014/05/02/you-need-a-tool-to-search-inside-your-standard-library/"/>
    <updated>2014-05-02T14:40:00+07:00</updated>
    <id>http://smonff.github.io/blog/2014/05/02/you-need-a-tool-to-search-inside-your-standard-library</id>
    <content type="html"><![CDATA[<p>Today, programming languages have so much big standard libraries that it&#8217;s a pain to know everything: one of my programming teacher (a C and C++ addict) told me that the thing that hurts him with Java and .Net was the huge standard library and the difficulty of having a good knowledge of these <em>toolkits</em>. Maybe he was not wrong, and that documentation is sometimes a kind of unusable garbage, or even disappearing (for example when Oracle moved everything about Java to random locations).</p>

<p>However, it can be a bigger pain to re-write something that already exists than to learn and build easy tools to search for informations inside your standard library. A tool that allow to search for common modules names (like <em>URI</em> manipulation or <em>JSON</em> or <em>IO</em>, anything), it&#8217;s sometime too long to search on metacpan.org and on perl.org when you just need to <code>use</code> something in your code. This problem comes also from my bad (human) memory, I can&#8217;t remember all these tools that I used only a few times. I can even less remember oneliners whith more than 20 chars&#8230;</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">perl</span> <span class="o">-</span><span class="nn">MExtUtils::</span><span class="n">Installed</span> <span class="o">-</span><span class="nn">MData::</span><span class="n">Dumper</span> <span class="o">-</span><span class="n">e</span>  <span class="s">&#39;my ($inst) = ExtUtils::Installed-&gt;new(); print Dumper($inst-&gt;modules());&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>`
&#8230; is maybe a possible solution to search for modules, but it is hard to remember.</p>

<p>I wondered how I could display all the modules installed on my machine (most of the time, you don&#8217;t need a <em>new</em> module). So after a search, <a href="stackoverflow.com/questions/115425/how-do-i-get-a-list-of-installed-cpan-modules#answer-117386">I found something that makes possible to display all the modules on my machine</a> (standard or user-installed modules, AKA <code>@INC</code> content).</p>

<p>The only thing that were missing was a kind of searchability. As I was too lazy and shy to try to extend <code>App::Module::Lister</code>, I&#8217;ve just wrote some configuration in my <code>.bashrc</code>.</p>

<p>First install App::Module::Lister&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cpanm App::Module::Lister  
</span><span class='line'>Searching App::Module::Lister on cpanmetadb ...
</span><span class='line'>Fetching http://www.cpan.org/authors/id/B/BD/BDFOY/App-Module-Lister-0.15.tar.gz
</span><span class='line'>Building and testing App-Module-Lister-0.15
</span><span class='line'>All tests successful.
</span><span class='line'>Successfully installed App-Module-Lister-0.15
</span><span class='line'>1 distribution installed
</span></code></pre></td></tr></table></div></figure>


<p>&#8230;then in .bashrc, add the following&#8230;</p>

<figure class='code'><figcaption><span>Allow to search inside Perl @INC and find installed modules. Note that it can take one argument (search string)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">function </span>plister <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="c"># Get the current position to go back into it  after the script run</span>
</span><span class='line'>  <span class="nv">INITIAL_POSITION</span><span class="o">=</span><span class="k">$(</span>PWD<span class="k">)</span>
</span><span class='line'>  <span class="nv">PLISTER_HOME</span><span class="o">=</span><span class="nv">$HOME</span>/perl5/lib/perl5/App/Module/
</span><span class='line'>  <span class="c"># Have to move because of limitation of the module</span>
</span><span class='line'>  <span class="c"># See http://search.cpan.org/dist/App-Module-Lister/lib/App/Module/Lister.pm#TO_DO</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="k">${</span><span class="nv">PLISTER_HOME</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># Search with a pattern</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> <span class="nv">$1</span> <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'>    <span class="c"># \grep &quot;unalias&quot; grep if you got some</span>
</span><span class='line'>    perl Lister.pm | <span class="se">\g</span>rep --ignore-case <span class="nv">$1</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;Searched with App::Module::Lister with pattern $1&quot;</span>
</span><span class='line'>  <span class="c"># Search all modules installed</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'><span class="k">    </span>perl Lister.pm
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;Searched with App::Module::Lister with no pattern&quot;</span>
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="k">  </span><span class="nb">cd</span> <span class="k">${</span><span class="nv">INITIAL_POSITION</span><span class="k">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>source</code> your <code>.bashrc</code>, and you now got a nice modules <em>local search-engine</em> based on <code>App::Module::Lister</code> abilities.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>plister Module::Starter
</span><span class='line'>Module::Starter   1.60
</span><span class='line'>Module::Starter::Smart    0.0.4
</span><span class='line'>Module::Starter::Simple   1.60
</span><span class='line'>Module::Starter::App  1.60
</span><span class='line'>Module::Starter::BuilderSet   1.60
</span><span class='line'>Module::Starter::Plugin::Template 1.60
</span><span class='line'>Searched with App::Module::Lister with pattern Module::Starter
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Perlbrew on Ubuntu]]></title>
    <link href="http://smonff.github.io/blog/2014/03/23/using-perlbrew-on-ubuntu/"/>
    <updated>2014-03-23T13:33:00+07:00</updated>
    <id>http://smonff.github.io/blog/2014/03/23/using-perlbrew-on-ubuntu</id>
    <content type="html"><![CDATA[<p>Today I discovered that I was using
<a href="https://metacpan.org/pod/release/FLORA/perl-5.14.2/pod/perl.pod">Perl 5, version 14.2</a>
(v5.14.2) from the Ubuntu 12.04 packages. It includes 57 registered patches. As it is a 2011 version, I&#8217;ve decided to switch from the Ubuntu packages to a more recent one (and considered as stable by the Perl community although it is not by the Debian one).</p>

<p>As I love to use <code>local::lib</code> and <code>cpanm</code>, I&#8217;ve chosen to use <a href="http://perlbrew.pl/"><code>Perlbrew</code></a> to achieve the installation of this last stable version. The tool seems as convenient as <code>cpanm</code> and <code>local::lib</code>, it is known for making your life easier when dealing with Perl installations.</p>

<p><code>Perlbrew</code> is :</p>

<ul>
<li><em>a tool to install different versions of perls</em> and switch through them</li>
<li><em>an admin-free installation management</em> system, means, as for <code>local::lib</code>, you don&#8217;t even need to have superuser rights to use it, so you don&#8217;t have to suck the admin&#8217;s ass</li>
<li>it&#8217;s just like <code>RVM</code> for those who know Ruby</li>
</ul>


<!--more-->


<p>The reason I write this post is that I encountered a tiny problem when installing <code>Perlbrew</code> on an Ubuntu box, so I hope it could be useful for you.</p>

<p>I assume that you already have <code>cpanm</code> and <code>local::lib</code> installed (you don&#8217;t use the <code>root</code> account nor sudo).</p>

<figure class='code'><figcaption><span>We install `Perlbrew`</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cpanm perlbrew
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Then, we initialize its environment. Don&#8217;t forget this part or it won&#8217;t work :</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>perlbrew init
</span><span class='line'>
</span><span class='line'>perlbrew root <span class="o">(</span>~/perl5/perlbrew<span class="o">)</span> is initialized.
</span><span class='line'>  
</span><span class='line'>Append the following piece of code to the end of your ~/.bash_profile and
</span><span class='line'>start a new shell, perlbrew should be up and fully functional from there:
</span><span class='line'>  
</span><span class='line'>    <span class="nb">source</span> ~/perl5/perlbrew/etc/bashrc
</span><span class='line'>      
</span><span class='line'>Simply run <span class="sb">`</span>perlbrew<span class="sb">`</span> <span class="k">for </span>usage details.
</span><span class='line'>      
</span><span class='line'>Happy brewing!
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<p>It has created some files in <code>~/.perlbrew</code>. You need to add the one that fit your environment in your configuration file (<code>.bashrc</code> or other) :</p>

<figure class='code'><figcaption><span>In .bashrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span> ~/perl5/perlbrew/etc/bashrc
</span></code></pre></td></tr></table></div></figure>


<p>Now start a new shell or <code>source</code> your shell configuration file, that&#8217;s it <em>Perlbrew is on</em>! You can check which Perls are available :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>perlbrew available
</span><span class='line'>  perl-5.19.10
</span><span class='line'>  perl-5.18.2
</span><span class='line'>  perl-5.16.3
</span><span class='line'>  perl-5.14.4
</span><span class='line'>  perl-5.12.5
</span><span class='line'>  perl-5.10.1
</span><span class='line'>  perl-5.8.9
</span><span class='line'>  perl-5.6.2
</span><span class='line'>  perl5.005_04
</span><span class='line'>  perl5.004_05
</span><span class='line'>  perl5.003_07
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>So pick a version, or ask for the last <em>stable</em> one. In fact, that&#8217;s the moment I encountered an issue with <code>Perlbrew</code> and <code>Devel::PatchPerl.pm</code>. I asked for last stable Perl&#8217;s installation but it failed :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>perlbrew install stable
</span><span class='line'>Installing /home/smonff/perl5/perlbrew/build/perl-5.18.2 into
</span><span class='line'>~/perl5/perlbrew/perls/perl-5.18.2
</span><span class='line'>  
</span><span class='line'>This could take a <span class="k">while</span>. You can run the following <span class="nb">command </span>on
</span><span class='line'>another shell to track the status:
</span><span class='line'>  
</span><span class='line'>  tail -f ~/perl5/perlbrew/build.perl-5.18.2.log
</span><span class='line'>  
</span><span class='line'>Installation process failed. To spot any issues, check
</span><span class='line'>  
</span><span class='line'>    /home/smonff/perl5/perlbrew/build.perl-5.18.2.log
</span><span class='line'>      
</span><span class='line'>You might also want to try upgrading patchperl before trying again:
</span><span class='line'>      
</span><span class='line'>  perlbrew install-patchperl
</span></code></pre></td></tr></table></div></figure>


<p>As the process was failing, I tailed the logs :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tail -f ~/perl5/perlbrew/build.perl-5.18.2.log
</span><span class='line'>Can<span class="err">&#39;</span>t locate Devel/PatchPerl.pm in @INC <span class="o">(</span>@INC contains: /etc/perl
</span><span class='line'>/usr/local/lib/perl/5.14.2 /usr/local/share/perl/5.14.2
</span><span class='line'>/usr/lib/perl5 /usr/share/perl5 /usr/lib/perl/5.14
</span><span class='line'>/usr/share/perl/5.14 /usr/local/lib/site_perl .<span class="o">)</span> at
</span><span class='line'>/home/smonff/perl5/bin/patchperl line 12.
</span><span class='line'>BEGIN failed--compilation aborted at /home/smonff/perl5/bin/patchperl line 12.
</span></code></pre></td></tr></table></div></figure>


<p>I tried to update a <code>Devel::PatchPerl</code>, but updating stupidely without understanding or without reading the doc is useless. Finally, I found the answer on <a href="http://stackoverflow.com/questions/16113467/perlbrew-fails-with-cant-locate-devel-patchperl-pm">StackOverflow</a>, even if it was clearly mentioned in the <code>Perlbrew</code> logs, you should better read sentences till the end and do what you&#8217;re told. Perlbrew seems to embark its own <code>Devel::PatchPerl</code> in <code>~/perl5/perlbrew/bin</code>, and you should not use the core one. More about this <a href="http://perlbrew.pl/Perlbrew-and-Friends.html">on Perlbrew website</a>&#8230; So now do what you&#8217;re told :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>perlbrew install-patchperl
</span></code></pre></td></tr></table></div></figure>


<p>Ok, it seems everything is ok. I tried some <code>perl -v</code> and the version has changed. But when installing Dancer with <code>cpanm</code> and setup a test Dancer application, Dancer was reconizing the old version :</p>

<p><img src="http://smonff.github.io/images/posts/dancer.png" alt="Dancer don't use Perlbrew" /></p>

<p>That&#8217;s because, in the same spirit when need a dedicated <code>patchperl</code>, the <code>cpanm</code> installation need a special process too :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>perlbrew install-cpanm
</span><span class='line'>  
</span><span class='line'>cpanm is installed to
</span><span class='line'>  
</span><span class='line'>  /home/smonff/perl5/perlbrew/bin/cpanm
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>This fixes the issues, the environment is ready. I believe all previously installed modules through <code>cpanm</code> should be re-installed now.</p>

<p>Perls installations will be very very easy to achieve :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>perlbrew install stable
</span><span class='line'>perl-5.18.2 is successfully installed.
</span></code></pre></td></tr></table></div></figure>


<p><strong>Happy brewing !</strong></p>

<h1>References</h1>

<ul>
<li><a href="http://perlbrew.pl/">perlbrew.pl/</a></li>
<li><a href="https://metacpan.org/pod/distribution/App-perlbrew/bin/perlbrew">Perlbrew on MetaCPAN</a></li>
<li>A talk about Perlbrew by Kang-min Liu</li>
</ul>


<iframe src="http://www.slideshare.net/slideshow/embed_code/9708071" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://fr.slideshare.net/gugod/perlbrew" title="Perlbrew" target="_blank">Perlbrew</a> </strong> from <strong><a href="http://www.slideshare.net/gugod" target="_blank">Kang-min Liu</a></strong> </div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting things done for developers working in low-band-switch areas]]></title>
    <link href="http://smonff.github.io/blog/2013/12/22/getting-thing-done-for-developpers-working-in-low-bandswitch-areas/"/>
    <updated>2013-12-22T20:01:00+07:00</updated>
    <id>http://smonff.github.io/blog/2013/12/22/getting-thing-done-for-developpers-working-in-low-bandswitch-areas</id>
    <content type="html"><![CDATA[<p>I have been in <a href="https://en.wikipedia.org/wiki/Lao_PDR">Lao PDR</a> for a week and I don&#8217;t have my high-speed Internet connection. All I have is a cool smartphone without a SIM card for this country. Though, it doesn&#8217;t seem to be a problem to find a SIM card: just before the immigration point in airport, the application form already mentions an ad for <a href="http://www.beeline.la/">one of the main telecoms company</a> saying that  <em>to really communicate like a local</em>, I should subscribe to that company.</p>

<h2>Get an unlimited data plan</h2>

<p>Anyway, I have to work for my <a href="http://etyssa.fr">french company</a> (that kindly grants me some holidays, just in time to empty my french flat and have some time to find electricity and Internet connection in Lao PDR), just before getting back to work.</p>

<p>Finding a SIM card is not a problem (you can literally find credit sellers for mobile phones at <em>each street corner</em>), and you don&#8217;t even need to give an address or have a bank account. The main problem is you don&#8217;t speak Lao, and Lao people don&#8217;t speak English that much. So maybe they will not understand you need this killer-unlimited-data-plan and give you some cheap <em>re-loadable</em> cards. Anyway, you don&#8217;t speak Lao either&#8230;</p>

<p>You will understand very soon that unlimited data plan, including phone calls and SMS like the one I previously used with <a href="http://free.fr">Free</a> in France is not that easy to find. 5 x 50 000 kips (5€) cards later and two days of shurfing has been enough to empty my cards :( , that was supposed to allow 2.5G of data.</p>

<h2>First sensations</h2>

<p>Once I asked to the couple who sold me the cards where I can get bigger or unlimited ones, they redirected me to the nearest <a href="http://laotel.com/home_Lao.html">Lao Telecoms</a> office where people were able to advice me a decent unlimited data-plan (still in alpha-test for me). Some impressions about it :</p>

<ul>
<li>SSH is available through the phone hotspot but pretty slow</li>
<li>band-switch is pretty good</li>
<li>no outgoing SMTP (or don&#8217;t find it for my current ISP)</li>
<li>some obtained IPs seems to be considered as potentially dangerous (open proxies, low reputation for spam, e.g. blacklisted on Wikipedia)</li>
<li>band-switch speed is bipolar</li>
<li>Some websites are hardly accessible, I don&#8217;t know if they are <em>locked</em> or <em>censored</em>, or only hosted on too far away servers (?)</li>
<li>network and / or electricity can be down</li>
</ul>


<!--more-->


<h3>Solutions to problems</h3>

<h4>Mosh</h4>

<p><img src="http://smonff.github.io/images/posts/broken_pipe.jpg" alt="Never let you abuse by stuff that shouldn't happen" /></p>

<p>First, I was very worried about SSH <em>availability</em>. A friend tried it for me from Laos before my departure, and the stuff seems to be OK. But I&#8217;ve forgot something: SSH is not that lightweight, mainly because of it&#8217;s strong encryption.</p>

<p>Another friend adviced me to use <a href="http://mosh.mit.edu">Mosh</a> :</p>

<blockquote><p>Remote terminal application that allows roaming, supports intermittent connectivity, and provides intelligent local echo and line editing of user keystrokes.</p><p>Mosh is a replacement for SSH. It&#8217;s more robust and responsive, especially over Wi-Fi, cellular, and long-distance links.</p><footer><strong>Mosh contributors,</strong> <cite><a href='http://mosh.mit.edu'>mosh.mit.edu/&hellip;</a></cite></footer></blockquote>


<p>And Mosh is absolutely incredible&#8230;</p>

<p>SSH was almost unusable, and even dangerous because of the latency time I&#8217;ve experimented that could increase typing errors. Mosh seems to be the best solution for mobile workers that need a stable and improved connection to a remote SSH server because of two of it&#8217;s main features :</p>

<ul>
<li><strong>roaming connection</strong>. You can literally switch from a connection to another and the connection between the local and distant Mosh servers will be maintained.</li>
<li><strong>predictive typing</strong>. As the connection will be slow, typing through SSH will have a long latency (this makes me very angry). Predictive typing will reduce the latency in an awesome way, you can&#8217;t almost feel it. In their own words, the stuff <em>get rid of network lag</em>.</li>
</ul>


<p>My life has been changed the day I discovered <a href="https://en.wikipedia.org/wiki/Tmux">Tmux</a>. I believe the use of Tmux + Mosh will makes your life easier if you telecommute in uncommon places, have to switch between connections easily or simply hibernate your computer without experiment some <em>broken pipe</em> horrors.</p>

<h4>Tor</h4>

<p>I don&#8217;t know how the Web&#8217;s informations could be controlled in Lao PDR. I&#8217;ve encountered some problems to access different technical websites :</p>

<ul>
<li>I have been forced to switch from French Ubuntu repositories to Malaysian one,</li>
<li>http://mosh.mit.edu and http://octopress.org weren&#8217;t available,</li>
<li>lots of website stress me with the accusation I&#8217;m a bot, or spammer, and I am sometimes blacklisted (just as on Wikipedia)</li>
<li>some more things are <em>weird</em></li>
</ul>


<p>I say weird because I can access to these sites through <a href="https://www.torproject.org/">Tor</a>.</p>

<p><img src="http://smonff.github.io/images/posts/good_luck_7_proxies.png" alt="Connection to some websites are better through Tor" /></p>

<blockquote><p>Tor is free software network for enabling on-line anonymity. Tor directs Internet traffic through a free, worldwide, volunteer network consisting of more than four thousand relays to conceal a user&#8217;s location or usage from anyone conducting network surveillance or traffic analysis. Using Tor makes it more difficult to trace Internet activity)</p><footer><strong>Tor Project Wikipedia page,</strong> <cite><a href='https://en.wikipedia.org/wiki/Tor_%28anonymity_network%29'>en.wikipedia.org/wiki/&hellip;</a></cite></footer></blockquote>


<p>Now each time I got troubles for accessing a part of the web I try through Tor: when it was impossible, it solves the problem most of the time, and when it&#8217;s too slow, it (strangely) helps. I&#8217;ve never felt the need of using an onion relay network (or <em>proxy</em>) in France, but it is necessary here.</p>

<p>More readings for those who wants to know more about what is a proxy.</p>

<h4>Electricity and network disruptions</h4>

<p>It&#8217;s not a daily thing, but for the first time in one week, we got a total district electricity failure that began in the morning and lasted until the afternoon.</p>

<p>Electricity and network disruptions can be very localized : find a nice place to work in another district in case of emergency.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to log easily with Log::Minimal and File::Stamped ?]]></title>
    <link href="http://smonff.github.io/blog/2013/09/24/how-to-log-easily-with-log-minimal-and-file-stamped/"/>
    <updated>2013-09-24T18:00:00+07:00</updated>
    <id>http://smonff.github.io/blog/2013/09/24/how-to-log-easily-with-log-minimal-and-file-stamped</id>
    <content type="html"><![CDATA[<p>We love logs because it helps us to debug during development. We also need a quick way to enable / disable logs because it&#8217;s not necessary for everybody :</p>

<ul>
<li>you maybe want logs during the development of your module</li>
<li>people who will use it don&#8217;t <em>necessary</em> want to watch it</li>
</ul>


<p>When testing a module and building a distribution, you maybe don&#8217;t want to inject <em>dirt</em> in your tests output. In the case of debuging, I think it&#8217;s a good thing to write it to a file and <code>tail</code> on it.</p>

<!--more-->


<p>We&#8217;re gonna use two CPAN&#8217;s modules, <a href="https://metacpan.org/module/Log::Minimal">Log::Minimal</a>, a <em>minimal but custimizable logger</em> and <a href="https://metacpan.org/module/File::Stamped">File::Stamped</a>, that allows <em>stamped log file</em>. They are not supposed to be build together, but Tokuhiro Matsuno(<code>File::Stamped</code> creator) recommend <code>Log::Minimal</code> in a code example.</p>

<p>My aim was to create a log system for the debug moment, because I was boring of using <code>p()</code> function from <a href="https://metacpan.org/module/Data::Printer">Data::Printer</a> during my development and tests, because it was a bad thing: I was constantly adding and moving debug-print-code, that is a bad practice because it makes you repeat stupid tasks and encourage to test in a random way. I took a look at CPAN and Stack Overflow for some logging solutions, and <a href="https://metacpan.org/module/Log::Log4perl">Log::Log4Perl</a> seems to be a recommended solution for most of serious apps. But it seems to much complicated to me, I don&#8217;t want to manage a new conf file, etc.</p>

<p>As <code>Log::Minimal</code> seems to be really simple to use, I&#8217;ve installed it and was very satisfacted of it quickly. Now, we are going to see how to use it to create a temporary file that will contain the traces.</p>

<figure class='code'><figcaption><span>Install the modules :D</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cpanm Log::Minimal File::Stamped
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Log some stuff to a file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nn">Log::</span><span class="n">Minimal</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">File::</span><span class="n">Stamped</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">File::</span><span class="n">HomeDir</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">File::Spec::</span><span class="n">Function</span> <span class="sx">qw(catdir catfile)</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ENV</span><span class="p">{</span><span class="n">LM_DEBUG</span><span class="p">}</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$work_path</span> <span class="o">=</span> <span class="nn">File::</span><span class="n">HomeDir</span><span class="o">-&gt;</span><span class="n">my_documents</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$log_fh</span> <span class="o">=</span> <span class="nn">File::</span><span class="n">Stamped</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span>
</span><span class='line'>  <span class="n">pattern</span> <span class="o">=&gt;</span> <span class="n">catdir</span><span class="p">(</span> <span class="nv">$work_path</span><span class="p">,</span> <span class="s">&quot;log.%Y-%m-%d.out&quot;</span><span class="p">),</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'><span class="c1"># Overrides Log::Minimal PRINT method</span>
</span><span class='line'><span class="nv">$</span><span class="nn">Log::Minimal::</span><span class="nv">PRINT</span> <span class="o">=</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>  <span class="k">my</span> <span class="p">(</span> <span class="nv">$time</span><span class="p">,</span> <span class="nv">$type</span><span class="p">,</span> <span class="nv">$message</span><span class="p">,</span> <span class="nv">$trace</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Removed $trace because it was too long in my environment</span>
</span><span class='line'>  <span class="k">print</span> <span class="p">{</span><span class="nv">$log_fh</span><span class="p">}</span> <span class="s">&quot;$time [$type] $message\n&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">debugf</span><span class="p">(</span><span class="s">&quot;My::Module debugger init.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">debugf</span><span class="p">(</span><span class="s">&quot;Other&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">debugf</span><span class="p">(</span><span class="s">&quot;interestant&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">debugf</span><span class="p">(</span><span class="s">&quot;things...&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you <code>tail</code> to <code>/home/user/Documents/log.2013-09-24.out</code> (adjust this to your own OS) from your terminal during your module tests&#8230;</p>

<figure class='code'><figcaption><span>tail</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tail -vf /home/user/Douments/log.2013-09-24.out
</span></code></pre></td></tr></table></div></figure>


<p>&#8230; it will log the following :</p>

<figure class='code'><figcaption><span>out</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2013-09-24T19:28:38 [DEBUG] My::Module debugger init.
</span><span class='line'>2013-09-24T19:28:39 [DEBUG] Other
</span><span class='line'>2013-09-24T19:28:39 [DEBUG] interestant
</span><span class='line'>2013-09-24T19:28:39 [DEBUG] things...</span></code></pre></td></tr></table></div></figure>


<p>That was a very <em>minimal</em> blog post, but I hope it could be usefull. Thanx to nmishin for cross-platforming advices !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Post-Google RSS Reader era]]></title>
    <link href="http://smonff.github.io/blog/2013/03/19/post-google-rss-reader-era/"/>
    <updated>2013-03-19T14:29:00+07:00</updated>
    <id>http://smonff.github.io/blog/2013/03/19/post-google-rss-reader-era</id>
    <content type="html"><![CDATA[<p>Hey, <a href="http://googleblog.blogspot.fr/2013/03/a-second-spring-of-cleaning.html">Google announce it will close it&#8217;s RSS <em>Reader</em></a>.
So what? Do we really need it anyway? You can find <a href="http://www.johndcook.com/blog/2013/03/14/rss-readers-on-linux/">plenty of friendly and beautiful clones of <em>Reader</em></a>, like <a href="http://feedly.com">Feedly</a> or <a href="http://theoldreader.com/">The Old Reader</a>. Both of two seems nice. Both of two are clearly Readers clones and alternatives.</p>

<p>I first tryed <em>The Old Reader</em> for about a month, before all the <em>Reader</em> drama when Google announce it&#8217;s death. It was so slow
that I was feeling asleep as waiting for a feed to load. I don&#8217;t notice anything particular in comparaison with Reader. The only thing is that you got some more hype <a href="https://en.wikipedia.org/wiki/Ajax_(programming">AJAX stuff</a> plus some special <em>social bits</em> that makes possible to share more fecal feeds with your friends. Just as if your friends weren&#8217;t full-time busy by their own feeds.</p>

<p>This is a very important thing. <em>Feeds</em>&#8230; Hey, if you want to share feeds with friends, please, open it, don&#8217;t close it for privacy reasons, use a tool without any account or password, open a Wiki or whatever.</p>

<p>Then, when the Reader tragedy came, I&#8217;ve tryed <a href="http://feedly.com">Feedly</a>. Honestly, it seems wonderful. I&#8217;ve liked the <a href="https://play.google.com/store/apps/details?id=com.devhd.feedly">Android App</a>, hey it&#8217;s a wonderful tool. Everybody were recommanding it on the internet. It seems it&#8217;s gonna be my new RSS feeds reader. But this morning I read an <a href="https://twitter.com/LeaVerou/status/313394360412672000">interesting Lea Verou Tweet</a>:</p>

<blockquote class="twitter-tweet" lang="fr"><p>So it looks like <a href="https://twitter.com/feedly">@feedly</a> is the most popular alternative, but it doesn’t seem to have any business model, so it could disappear at any time.</p>&mdash; Lea Verou (@LeaVerou) <a href="https://twitter.com/LeaVerou/statuses/313394360412672000">17 Mars 2013</a></blockquote>


<script async src="http://smonff.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>So. What if it will be true. What if Feedly disappear soon? It seems a good solution would be to select a good RSS feed free software like <a href="http://tt-rss.org/">Tiny Tiny RSS</a>, pick-up a random server, set-up a LAMP environment and make things by yourself (as describe in <a href="http://www.sebsauvage.net/rhaa/index.php?2013/03/15/17/15/39-arretez-de-pleurer-google-reader-hebergez-un-lecteur-rss-chez-vous">this sebsauvage post</a>&#8230; I mention <em>Tiny Tiny RSS</em> because it&#8217;s realy simple, customizable and feature <a href="http://f-droid.org/repository/browse/?fdfilter=rss&amp;fdid=org.fox.ttrss">a great Android client that communicate with an API on your server&#8217;s instance</a> featuring interesting synchronisation stuff.</p>

<p>You would not get a prettiest UI/UX as the Feedly one, you won&#8217;t get the Google Reader goodies, but your data will be safe. And you can hack your UI as you want&#8230; Ok, Reader was pretty, but we don&#8217;t like proprietary software. We would like to keep our feeds free, we don&#8217;t need these <em>closing source</em> web-apps that starve our feeds&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Need a Markdown editor for Android with Github support]]></title>
    <link href="http://smonff.github.io/blog/2013/03/18/need-a-markdown-editor-for-android-with-github-support/"/>
    <updated>2013-03-18T14:44:00+07:00</updated>
    <id>http://smonff.github.io/blog/2013/03/18/need-a-markdown-editor-for-android-with-github-support</id>
    <content type="html"><![CDATA[<p>This is my second blog post and I still need a Markdown editor for Android with Github support.</p>

<p>Start to think to write it but I don&#8217;t need yet another side project. My phone is not rooted and can&#8217;t find a simple and free tool that support Markdown + Github.</p>

<p>But suddenly, I simply remember that you can edit Markdown files directly in Github&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://smonff.github.io/blog/2013/03/11/hello-world/"/>
    <updated>2013-03-11T14:42:00+07:00</updated>
    <id>http://smonff.github.io/blog/2013/03/11/hello-world</id>
    <content type="html"><![CDATA[<p>This is my <a href="http://smonff@github.com">new blog</a>. It&#8217;s made with <a href="http://octopress.org">Octopress</a> and totally (software and content) <a href="https://github.com/smonff/smonff.github.com">open source</a>.</p>
]]></content>
  </entry>
  
</feed>
